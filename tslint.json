{
    "extends": [
        "tslint:all",
        "tslint-sonarts"
    ],
   "rulesDirectory": [
        "tslint-consistent-codestyle",
        "node_modules/tslint-clean-code/dist/src"
    ],
    "rules": {
        //// ts-lint overrides.
        "align": [true, "statements"],  // use inferred type of multiline (object) arguments
        "ban-types": {
            "options": [
                ["Object", "Avoid using the `Object` type. Did you mean `object`?"],
                ["Boolean", "Avoid using the `Boolean` type. Did you mean `boolean`?"],
                ["Number", "Avoid using the `Number` type. Did you mean `number`?"],
                ["String", "Avoid using the `String` type. Did you mean `string`?"],
                ["Symbol", "Avoid using the `Symbol` type. Did you mean `symbol`?"]
            ]
        },
        "ban": [true, "require"],
        "comment-format": [ true, "check-space"],  // Don't check uppercase.
        "completed-docs": false,  // Code has to be readable itself without any docs.
        "curly": [true, "ignore-same-line"],  // Quick conditional oneliners are ok.
        "file-name-casing": [true, "camel-case", "pascal-case"],  // Both are ok.
        "indent": [true, "spaces", 4],
        "invalid-void": false,  // Buggy, see https://github.com/palantir/tslint/issues/4828
        "max-line-length": [true, {"limit": 120}],
        "newline-per-chained-call": false,  // Opnionated style, don't spam LOC.
        "no-async-without-await": false,  // Because there's a difference, not only a style.
        "no-consecutive-blank-lines": [true, 2],  // Leave doubles alone to divide blocks, e.g. after imports.
        "no-console": [true, "debug", /* "info",  */"log", "time", "timeEnd", "trace"],  // TODO: get logger library.
        "no-implicit-dependencies": [true, "dev"],  // Because webpack requires to have them under devDependencies.
        "no-magic-numbers": false,  // TODO: Too much refactor.
        "no-namespace": false,  // TODO: investigate?
        "no-null-keyword": false,  // undefined means missing, null means explicit voidness.
        "no-submodule-imports": [true,
            "@sepraisal/common/lib/utils_node",  // NodeJS entry-point.
            "@material-ui/core",  // As per guidelines for tree-shaking.
            "@material-ui/icons",  // As per guidelines for tree-shaking.
            "rxjs",  // As per guidelines for tree-shaking.
            "react-dev-utils",  // SSR needs those "internals".
            "webpack-hot-middleware/client",  // SSR needs those "internals".
            "react-jss",  // SSR needs those "internals".
            "react-dom"  // SSR needs those "internals".
        ],
        "no-unnecessary-qualifier": false,  // Conflict with Babel loader that doesn't work quite like that.
        "no-unused-variable": false,  // Depreciated.
        "no-use-before-declare": false,  // Deprecated.
        "no-void-expression": false,  // Let the strict-null check for mistakes, and allow nice onelines where it's ok.
        "object-literal-shorthand": true,  // object-literal-shorthand offers an abbreviation not an abstraction
        "object-literal-sort-keys": [true, "ignore-case"],
        "ordered-imports": [true, {"named-imports-order": "any"}],  // TSHero sorts his own way.
        "prefer-readonly": false,  // DOn't spam readonly at arrow function in React components.
        "quotemark": [true, "single"],
        "semicolon": [true, "never"],  // JS can be written cleanly.
        "strict-boolean-expressions": [true, "allow-null-union", "allow-undefined-union"],  // I just like to use ! as generic falsey.
        "strict-comparisons": false,  // Buggy, see https://github.com/palantir/tslint/issues/4838
        "type-literal-delimiter": false,  // Don't enforce semicolons.
        "typedef": false,  // Don't spam typedefs.
        "variable-name": false,  // Conflicts with "naming-convention".
        "whitespace": [true,
            // "check-branch",  // "if(...)" is better than "if (...)", just like any normal function.
            "check-decl",
            "check-operator",
            "check-module",
            "check-separator",
            "check-type",
            "check-typecast",
            "check-preblock",
            "check-type-operator",
            "check-rest-spread"
        ],


        //// rxjs-tslint rules.
        // "rxjs-collapse-imports": true,
        // "rxjs-pipeable-operators-only": true,
        // "rxjs-no-static-observable-methods": true,
        // "rxjs-proper-imports": true,


        //// tslint-sonarTS overrides.
        "mccabe-complexity": true,  // Default was off.
        // None so far.


        //// tslint-consistent-codestyle rules. Set explicitly because no recommends were provided.
        "early-exit": [true, { "max-length": 4 }],
        "naming-convention": [true,
            // forbid leading and trailing underscores and enforce camelCase/PascalCase on EVERY name. will be overridden by subtypes if needed
            {"type": "default", "format": ["camelCase", "PascalCase"], "leadingUnderscore": "forbid", "trailingUnderscore": "forbid"},
            {"type": "property", "modifiers": ["private", "var"], "leadingUnderscore": "allow"},
            // require all global constants to be camelCase or UPPER_CASE
            // all other variables and functions still need to be camelCase
            {"type": "variable", "modifiers": ["global", "const"], "format": ["camelCase", "PascalCase", "UPPER_CASE"]},
            // override the above format option for exported constants to allow only UPPER_CASE
            {"type": "variable", "modifiers": ["export", "const"], "format": "UPPER_CASE"},
            // require exported constant variables that are initialized with functions to be camelCase
            {"type": "functionVariable", "modifiers": ["export", "const"], "format": ["camelCase", "PascalCase"]},
            // allow leading underscores for unused parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
            // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
            {"type": "parameter", "modifiers": "unused", "leadingUnderscore": "allow"},
            // forbid leading underscores for private properties and methods because TS already has modifier, all other rules still apply
            {"type": "member", "modifiers": "private", "leadingUnderscore": "forbid"},
            // same for protected
            {"type": "member", "modifiers": "protected", "leadingUnderscore": "forbid"},
            // exclicitly disable the format check only for method toJSON
            {"type": "method", "filter": "^toJSON$", "format": null},
            // enforce UPPER_CASE for all public static readonly(!) properties
            {"type": "property", "modifiers": ["public", "static", "const"], "format": "UPPER_CASE"},
            // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
            {"type": "type", "format": "PascalCase"},
            // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
            {"type": "class", "modifiers": "abstract", "prefix": "Abstract"},
            // interface names must start with "I". The following part of the name must be valid PascalCase
            {"type": "interface", "prefix": "I"},
            // generic type parameters must start with "T"
            // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
            // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
            {"type": "genericTypeParameter", "prefix": "T"},
            // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
            {"type": "enum", "format": "PascalCase"},
            {"type": "enumMember", "format": "PascalCase"}
        ],
        "no-accessor-recursion": true,
        "no-as-type-assertion": false,
        "no-collapsible-if": true,
        "no-else-after-return": true,
        "no-return-undefined": true,
        "no-static-this": true,
        "no-unnecessary-else": true,
        "no-unnecessary-type-annotation": true,
        "no-unused": [true, "ignore-parameters"],
        "no-var-before-return": true,
        "object-shorthand-properties-first": false,  // Conflicts with "object-literal-sort-keys"
        "parameter-properties": true,
        "prefer-const-enum": true,
        "prefer-while": true,


        //// tslint-clean-code rules. Set explicitly because recommends overrides a lot tslint rules.
        "id-length": [true, {"min": 2, "max": 28, "exceptions": [
                // because "componentWillReceiveProps".length === 25
                // ... and "HotModuleReplacementPlugin".length === 26
                "T", "p", "a", "h",    // exceptions for T generic type and HTML tags,
                "x", "y", "z",  // well-known coordinate variables.
                "t",  // i118n library.
                "_",  // well-known for use to "trash" parameter.
                "i",  // well-known "index" variable.
                "$",  // well-known special variable for xml2js.
                "X", "Y", "Z", "MyObjectBuilder_InventoryItem", "MyObjectBuilder_InventoryBase", "IBlueprintPrefabBlueprintDefinition", "IBlueprintPrefabBlueprintDefinition",  // Types from XMLs.
                "b"  // well-known for use in `array.sort((a, b)=>a-b)`.
            ]}],
        "max-func-args": [true, 4],  // 4 according to Express framework.
        "min-class-cohesion": [true, 0.5],
        "newspaper-order": false,  // Conflicts with "member-ordering".
        "no-commented-out-code": false,  // Conflicts with "no-commented-code".
        "no-complex-conditionals" : true,
        "no-for-each-push" : true,
        "no-map-without-usage" : true,
        "prefer-dry-conditionals" : true,
        "try-catch-first" : false  // Forbids readable code, e.g. try-catch it outside of fn. Take care yourself.


    }
}
